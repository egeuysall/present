// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gifts.sql

package supabase

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGift = `-- name: CreateGift :exec
INSERT INTO gifts (user_id, idea, price)
VALUES ($1, $2, $3)
`

type CreateGiftParams struct {
	UserID pgtype.UUID
	Idea   string
	Price  pgtype.Numeric
}

func (q *Queries) CreateGift(ctx context.Context, arg CreateGiftParams) error {
	_, err := q.db.Exec(ctx, createGift, arg.UserID, arg.Idea, arg.Price)
	return err
}

const deleteGiftByID = `-- name: DeleteGiftByID :exec
DELETE FROM gifts
WHERE id = $1 AND user_id = $2
`

type DeleteGiftByIDParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteGiftByID(ctx context.Context, arg DeleteGiftByIDParams) error {
	_, err := q.db.Exec(ctx, deleteGiftByID, arg.ID, arg.UserID)
	return err
}

const getGiftByID = `-- name: GetGiftByID :one
SELECT id, user_id, idea, price, created_at, updated_at FROM gifts
WHERE id = $1 AND user_id = $2
`

type GetGiftByIDParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) GetGiftByID(ctx context.Context, arg GetGiftByIDParams) (Gift, error) {
	row := q.db.QueryRow(ctx, getGiftByID, arg.ID, arg.UserID)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Idea,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGiftsByUser = `-- name: GetGiftsByUser :many
SELECT id, user_id, idea, price, created_at, updated_at FROM gifts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetGiftsByUser(ctx context.Context, userID pgtype.UUID) ([]Gift, error) {
	rows, err := q.db.Query(ctx, getGiftsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gift
	for rows.Next() {
		var i Gift
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Idea,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGiftByID = `-- name: UpdateGiftByID :exec
UPDATE gifts
SET
    idea = COALESCE($2, idea),
    price = COALESCE($3, price),
    updated_at = now()
WHERE id = $1 AND user_id = $4
`

type UpdateGiftByIDParams struct {
	ID     pgtype.UUID
	Idea   string
	Price  pgtype.Numeric
	UserID pgtype.UUID
}

func (q *Queries) UpdateGiftByID(ctx context.Context, arg UpdateGiftByIDParams) error {
	_, err := q.db.Exec(ctx, updateGiftByID,
		arg.ID,
		arg.Idea,
		arg.Price,
		arg.UserID,
	)
	return err
}
