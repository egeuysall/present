// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package supabase

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserAuth = `-- name: GetUserAuth :one
SELECT id, hashed_password
FROM users
WHERE email = $1
`

type GetUserAuthRow struct {
	ID             pgtype.UUID
	HashedPassword string
}

func (q *Queries) GetUserAuth(ctx context.Context, email string) (GetUserAuthRow, error) {
	row := q.db.QueryRow(ctx, getUserAuth, email)
	var i GetUserAuthRow
	err := row.Scan(&i.ID, &i.HashedPassword)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, created_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        pgtype.UUID
	Email     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (email, hashed_password)
VALUES ($1, $2)
    RETURNING id
`

type InsertUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Email, arg.HashedPassword)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
